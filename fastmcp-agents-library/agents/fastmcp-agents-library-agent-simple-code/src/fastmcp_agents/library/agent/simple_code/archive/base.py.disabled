"""
This agent is used to perform simple code tasks.
"""

from collections.abc import AsyncIterator
from contextlib import ExitStack, asynccontextmanager
from pathlib import Path
from typing import Any

from fastmcp import FastMCP
from fastmcp_ai_agent_bridge.pydantic_ai import FastMCPToolset
from pydantic import BaseModel, Field
from pydantic_ai import Agent
from pydantic_ai.agent import AgentRunResult

from fastmcp_agents.core.agents.base import Field
from fastmcp_agents.core.agents.task import TaskAgent
from fastmcp_agents.library.agent.simple_code.helpers.git import quick_clone_git_repo
from fastmcp_agents.library.mcp.strawgate import (
    read_only_filesystem_mcp,
    read_write_filesystem_mcp,
)

class BaseCodeAgent(TaskAgent):
    """An agent that can perform simple code tasks."""

    clean_workspace: bool = Field(
        default=True,
        description="Whether to clean the workspace after the task is complete. Only applicable if a Git URL is provided.",
    )

    @asynccontextmanager
    async def prepare_workspace(self, *, git_url: str | None = None) -> AsyncIterator[tuple[Path, dict[str, Any] | None]]:
        directory = Path.cwd()

        with ExitStack() as stack:
            if git_url is not None:
                self.logger.info(f"Cloning git repository from {git_url}")
                context_manager = quick_clone_git_repo(git_url, set_cwd=True, delete_on_exit=self.clean_workspace)

                git_repo = stack.enter_context(context_manager)

                self.logger.info(f"Cloned git repository to {git_repo}")

            tools = await self.get_tools()

            structure = await tools["get_structure"].run(arguments={})

            yield directory, structure.structured_content
