agents:
  - name: ask_git_agent
    description: >-
      Assists with performing Git operations as requested by the user.
    instructions: >-
      As a git agent, your primary role is to assist users with Git operations.
      Leverage the available tools to perform tasks and answer questions related to Git repositories.

      General High-Level Instructions:

      1. Prioritize Non-Destructive Operations: When performing tasks that involve integrating changes or modifying history, prioritize non-destructive operations. Avoid commands like `git reset --hard` unless explicitly instructed and understood by the user, as they can lead to data loss.
      2. Utilize Topic Branches for New Work: For implementing new features or bug fixes, create and work within dedicated topic branches to isolate work themes.
      3. Adhere to Clear Commit Message Guidelines: Follow a standard convention for commit messages, including a concise subject line and a more detailed body if necessary.
      4. Handle Merge Conflicts Gracefully: If a merge operation results in conflicts, pause the operation, report the conflict to the user, and provide information about the conflicted files for manual resolution. Do not attempt automatic resolution unless a specific strategy is provided.
      5. Maintain Awareness of Remote State: Before pushing or pulling, perform a `git fetch` to update knowledge of the remote's state and identify potential conflicts early.
      6. Be Explicit in Remote Interactions: When interacting with remote repositories, explicitly specify the remote name and the relevant branch name.
      7. Regularly Check Repository Status: Use `git status` to monitor the state of the working directory, staging area, and local branches relative to their upstream counterparts.
      8. Manage Submodules with Care: If the repository includes submodules, ensure submodule changes are pushed before the main project's changes and handle submodule updates and branch switching carefully.

      **Important:** Before executing most Git commands, ensure a working directory is set using the `git_set_working_dir` tool. If the user's request implies a specific repository path, use `git_set_working_dir` first, validating that it's a Git repository. Subsequent tool calls can then often use the default `path: '.'`.

      When reporting success, include the necessary information for the caller to consume the work you have done.




mcpServers:
  git:
    command: npx
    args:
      - "@cyanheads/git-mcp-server"
    tools:
      git_add:
        append_description:
          Relevant to tasks like "Stage all changes", "Add file.txt", "Stage changes in src"
        parameter_overrides:
          - name: files
            default: null
      git_branch:
        append_description:
          Relevant to tasks like "List branches", "Create branch 'feature/xyz'", "Delete branch
          'old'", "Rename branch 'bugfix' to 'hotfix'"
      git_checkout:
        append_description:
          Relevant to tasks like "Switch to branch 'develop'", "Checkout commit abc123", "Restore
          file.txt"
      git_cherry_pick:
        append_description: Relevant to tasks like "Cherry-pick commit abc123"
      git_clean:
        append_description: Relevant to tasks like "Removing Untracked Files"
      git_clone:
        description:
          Clones a Git repository from a given URL into a relative directory path. Supports cloning
          specific branches and setting clone depth. Relevant to tasks like "Clone repo https://...
          into /path/..."
        parameter_overrides:
          - description:
              The relative directory path to clone the repository into. A good default for this is
              the name of the repository.
            name: targetPath
          - default: 1
            description: The depth to clone the repository to. Minimum and default value is 1.
            name: depth
      git_commit:
        append_description: Relevant to tasks like "Commit staged changes with message '...'"
      git_fetch:
        append_description: Relevant to tasks like "Fetch from origin", "Fetch all remotes"
      git_init:
        append_description: Relevant to tasks like "Initialize a new Git repository here"
      git_log:
        append_description: Relevant to tasks like "Viewing Commit History", "Show last 5 commits"
      git_pull:
        append_description: Relevant to tasks like "Pull latest changes", "Pull from origin develop"
      git_push:
        append_description: Relevant to tasks like "Push my changes", "Push to origin main"
      git_rebase:
        append_description:
          Relevant to tasks like "Reapplying Commits (Rebasing)", "Continue rebase"
      git_remote:
        append_description:
          Relevant to tasks like "List remotes", "Add remote 'upstream' ...", "Remove remote
          'origin'"
      git_reset:
        append_description: Relevant to tasks like "Resetting State", "Hard reset to commit abc123"
      git_show:
        append_description:
          Relevant to tasks like "Show commit abc123", "Show content of file.txt at abc123"
      git_stash:
        append_description:
          Relevant to tasks like "Managing Stashed Changes", "Save changes", "Apply stash@{0}"
      git_status:
        append_description:
          Relevant to tasks like "What's the status of my repository?", "Are there changes?"
      git_tag:
        append_description: Relevant to tasks like "Create tag v1.0.0", "Delete tag old-tag"
      git_worktree:
        append_description: Relevant to tasks like "Managing Worktrees", "Add worktree at /path/..."
      git_wrapup_instructions:
        append_description: Relevant to tasks like "Perform the Git wrap-up"
