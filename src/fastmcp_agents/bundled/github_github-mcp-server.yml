agents:
  - name: ask_github_agent
    description: >-
      Assists with performing GitHub operations as requested by the user.
    instructions: >-
      You are a helpful assistant that can perform GitHub operations as requested by the user.
      You will be given a GitHub issue number, and you will need to use the tools available to you to perform the operation.

  - name: summarize_github_issue
    description: >-
      Assists with summarizing a GitHub issue and comments.
    instructions: >-
      You are a helpful assistant that can summarize a GitHub issue and
      comments. You will be given a GitHub issue number, and you will need to
      use the tools available to you to summarize the issue and comments.

      If asked for related or duplicate issues, you should call the
      `search_issues` tool to find issues that are related to the issue you are
      summarizing. When providing a list of related issues, include the issue
      number, a short description of why you think the issue is related, and a
      high/medium/low confidence rating for how confident you are in your
      assessment that the issue is related. Do not mention that the issue you're
      looking at showed up in your searches.

      If you need to query GitHub issues, you should call the `search_issues_query_syntax` tool to get the syntax guide
      and then use that syntax to query GitHub issues with the `search_issues` tool.

    allowed_tools:
      - "get_issue"
      - "get_issue_comments"
      - "search_issues"
      - "search_issues_query_syntax"

  - name: summarize_pull_request
    description: >-
      Request a report on a GitHub pull request. Include a description of what
      you want  the report to include, how verbose or concise you want it to be,
      and any particular areas you want it to focus on.
    instructions: >-
      You are a helpful assistant that can produce a report on a GitHub pull
      request, its comments, linked issues, and more. You will likely be given a
      GitHub pull request number along with some specific instructions on what
      kind of report to produce and you will need to use the tools available to
      you to produce the report desired by the user.

      Unless otherwise specified, you should produce a report that is relatively
      concise and focuses on the most important parts of the pull request.

    allowed_tools:
      - "get_pull_request"
      - "get_pull_request_files"
      - "get_pull_request_status"
      - "get_pull_request_comments"
      - "get_pull_request_reviews"
      - "get_issue"
      - "get_issue_comments"

tools:
- name: search_issues_query_syntax
  description: >-
    Returns the syntax guide for querying issues and pull requests via
    `search_issues` tool.
  returns: >-
    # GitHub Issue and Pull Request Search Syntax Summary

    *   **Case Insensitivity**: Search is not case sensitive.
    *   **Multi-word Terms**: Use double quotes around multi-word search terms (e.g., `label:"help wanted"`).
    *   **Exclusion**: Use a minus (`-`) symbol before a qualifier to exclude results (e.g., `-author:octocat`). This does not work for `no:` qualifiers.
    *   **Boolean Operators**:
        *   `AND`: Returns results where both statements are true (e.g., `label:"question" AND assignee:octocat`). A space between statements is treated as `AND`.
        *   `OR`: Returns results where either statement is true (e.g., `assignee:octocat OR assignee:hubot`).
    *   **Nesting Filters**: Use parentheses `()` to group qualifiers for more complex filters (up to five levels deep). Example: `(type:"Bug" AND assignee:octocat) OR (type:"Feature" AND assignee:hubot)`
    *   **Date Formatting**: Dates follow ISO8601 standard: `YYYY-MM-DD`. Optional time: `THH:MM:SS+00:00`.
    *   **Range Qualifiers**: Use `>`, `<`, `>=`, `<=`, `..` for numerical and date ranges (e.g., `comments:>100`, `created:<2011-01-01`, `comments:500..1000`).

    ## Key Qualifiers

    ### Type and State

    *   `type:pr` or `is:pr`: Matches pull requests only.
    *   `type:issue` or `is:issue`: Matches issues only.
    *   `state:open` or `is:open`: Matches open issues/pull requests.
    *   `state:closed` or `is:closed`: Matches closed issues/pull requests.
    *   `is:queued`: Matches pull requests currently queued to merge.
    *   `reason:completed`: Filters issues closed as "completed".
    *   `reason:"not planned"`: Filters issues closed as "not planned".
    *   `is:merged`: Matches merged pull requests.
    *   `is:unmerged`: Matches pull requests that are open or closed without being merged.
    *   `is:locked`: Matches issues/pull requests with a locked conversation.
    *   `is:unlocked`: Matches issues/pull requests with an unlocked conversation.

    ### Content and Location

    *   `in:title`: Searches only in the title.
    *   `in:body`: Searches only in the body.
    *   `in:comments`: Searches only in the comments.
    *   `in:title,body`: Searches in title or body.
    *   `user:_USERNAME_`: Searches in repositories owned by a specific user.
    *   `org:_ORGNAME_`: Searches in repositories owned by a specific organization.
    *   `repo:_USERNAME/REPOSITORY_`: Searches in a specific repository.
    *   `is:public`: Matches issues/PRs in public repositories.
    *   `is:private`: Matches issues/PRs in private repositories you can access.
    *   `archived:true`: Matches issues/PRs in archived repositories.
    *   `archived:false`: Matches issues/PRs in unarchived repositories.
    *   `language:_LANGUAGE_`: Filters by the primary language of the repository (e.g., `language:ruby`).

    ### People and Involvement

    *   `author:_USERNAME_`: Finds issues/PRs created by a user or integration account (e.g., `author:octocat`, `author:app/robot`).
    *   `assignee:_USERNAME_`: Finds issues/PRs assigned to a user.
    *   `assignee:*`: Finds issues/PRs with *any* assignee (within a single repository).
    *   `mentions:_USERNAME_`: Finds issues/PRs that mention a user.
    *   `commenter:_USERNAME_`: Finds issues/PRs with a comment from a user.
    *   `involves:_USERNAME_`: Finds issues/PRs where a user is involved (author, assignee, mentioner, or commenter).
    *   `team:_ORGNAME/TEAMNAME_`: Finds issues/PRs that mention a specific team.
    *   `@me`: Can be used with `author`, `assignee`, `mentions`, `commenter`, `user-review-requested` to refer to the current user (e.g., `author:@me`).

    ### Labels, Milestones, and Projects

    *   `label:"_LABEL_"`: Filters by a specific label.
        *   Logical OR for labels: `label:"bug","wip"`
        *   Logical AND for labels: `label:"bug" label:"wip"`
    *   `milestone:"_MILESTONE_"`: Filters by a specific milestone.
    *   `project:_PROJECT_NUMBER_`: Filters by a specific project number.

    ### Pull Request Specific

    *   `linked:pr`: Filters issues linked to a pull request by a closing reference.
    *   `linked:issue`: Filters pull requests linked to an issue that the PR may close.
    *   `head:_HEAD_BRANCH_`: Filters by the head branch name.
    *   `base:_BASE_BRANCH_`: Filters by the base branch name.
    *   `status:pending`: Filters PRs with a pending commit status.
    *   `status:success`: Filters PRs with a successful commit status.
    *   `status:failure`: Filters PRs with a failed commit status.
    *   `_SHA_`: Searches for PRs containing a commit SHA (at least 7 characters).
    *   `draft:true`: Matches draft pull requests.
    *   `draft:false`: Matches pull requests ready for review.
    *   `review:none`: Matches PRs that haven't been reviewed.
    *   `review:required`: Matches PRs that require a review.
    *   `review:approved`: Matches PRs approved by a reviewer.
    *   `review:changes_requested`: Matches PRs where changes were requested.
    *   `reviewed-by:_USERNAME_`: Matches PRs reviewed by a specific person.
    *   `review-requested:_USERNAME_`: Matches PRs where a specific person is requested for review.
    *   `user-review-requested:@me`: Matches PRs you have directly been asked to review.
    *   `team-review-requested:_TEAMNAME_`: Matches PRs with review requests from a specific team.

    ### Missing Metadata

    *   `no:label`: Matches issues/PRs without any labels.
    *   `no:milestone`: Matches issues/PRs not associated with a milestone.
    *   `no:assignee`: Matches issues/PRs not associated with an assignee.
    *   `no:project`: Matches issues/PRs not associated with a project.

    ### Numerical Filters

    *   `comments:_n_`: Filters by number of comments (e.g., `comments:>100`, `comments:500..1000`).
    *   `interactions:_n_`: Filters by number of reactions and comments (e.g., `interactions:>2000`).
    *   `reactions:_n_`: Filters by number of reactions (e.g., `reactions:>1000`).

    ### Date Filters

    *   `created:_YYYY-MM-DD_`: Filters by creation date.
    *   `updated:_YYYY-MM-DD_`: Filters by last update date.
    *   `closed:_YYYY-MM-DD_`: Filters by closed date.
    *   `merged:_YYYY-MM-DD_`: Filters by merged date (for PRs).

    ## Example Queries

    *   `is:issue is:open author:octocat label:"bug"`: Open bugs created by octocat.
    *   `type:pr review:required language:javascript`: JavaScript pull requests requiring review.
    *   `repo:octo-org/octo-project comments:>50 created:>=2023-01-01`: Issues/PRs in `octo-org/octo-project` with over 50 comments created since Jan 1, 2023.
    *   `is:issue no:assignee no:milestone`: Issues with no assignee and no milestone.
    *   `team:myorg/frontend-team is:open is:pr`: Open pull requests mentioning the `myorg/frontend-team`.

mcpServers:
  "github":
    command: docker
    args:
      - "run"
      - "-i"
      - "--rm"
      - "-e"
      - "GITHUB_PERSONAL_ACCESS_TOKEN"
      - "ghcr.io/github/github-mcp-server"
    tools:
      search_issues:
        description: >-
          Search issues on GitHub using GitHub issue search query syntax.
          Querying GitHub issues requires using a  special syntax. Unless you
          know the exact query you want to use, we recommend calling the
          `search_issues_query_syntax` tool to get the syntax guide and then
          using that syntax to query GitHub issues with this tool.

          All queries must have at minimum a `type:pr`/`is:pr` or `type:issue`/`is:issue` qualifier.